import os
from openai import OpenAI

client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
from github import Github
from git import Repo
import tempfile
import shutil

# Initialize OpenAI and GitHub clients
github_token = os.getenv('GHTOKEN')
repo_name = os.getenv('REPO_NAME')
issue_number = int(os.getenv('ISSUE_NUMBER'))

g = Github(github_token)
repo = g.get_repo(repo_name)
issue = repo.get_issue(number=issue_number)

# Step 1: Fetch Issue Content
issue_content = issue.body

# Step 2: Generate Code with GPT
prompt = f"""
You are an AI assistant that generates code changes based on user requests.

Issue Description:
{issue_content}

Provide the code changes needed to address this issue.
"""

response = client.completions.create(engine="gpt-3.5-turbo",
prompt=prompt,
max_tokens=800,
temperature=0)

code_changes = response.choices[0].text.strip()

# Step 3: Apply Code Changes
# Clone the repository to a temporary directory
temp_dir = tempfile.mkdtemp()
cloned_repo = Repo.clone_from(
    repo.clone_url.replace("https://", f"https://{github_token}@"),
    temp_dir,
    branch='main'
)

# Create a new branch
new_branch_name = f'issue-{issue_number}-gpt-update'
cloned_repo.git.checkout('-b', new_branch_name)

# Apply code changes
# This example assumes code_changes are in a specific file format
# You need to parse code_changes and write to the appropriate files
# For simplicity, let's assume the output is a filename and code content

# Example parsing (you need to adjust this based on actual output)
# Assume code_changes format: "Filename: path/to/file.py\n\n[Code Content]"
try:
    filename, code_content = code_changes.split('\n\n', 1)
    filename = filename.replace('Filename: ', '').strip()
    file_path = os.path.join(temp_dir, filename)

    # Ensure the directory exists
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    # Write the code content to the file
    with open(file_path, 'w') as f:
        f.write(code_content)

    # Step 4: Commit and Push Changes
    cloned_repo.git.add('--all')
    cloned_repo.index.commit(f'GPT update for issue #{issue_number}')
    origin = cloned_repo.remote(name='origin')
    origin.push(new_branch_name)

    # Step 5: Create Pull Request
    pr = repo.create_pull(
        title=f'GPT Update for Issue #{issue_number}',
        body='Automated code changes generated by GPT.',
        head=new_branch_name,
        base='main'
    )

    # Comment on the issue with the PR link
    issue.create_comment(f'A pull request has been created: {pr.html_url}')

except Exception as e:
    # Log the exception and comment on the issue
    issue.create_comment(f'An error occurred while processing the issue: {e}')

finally:
    # Clean up temporary directory
    shutil.rmtree(temp_dir)

